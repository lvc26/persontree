#pragma once
#include <string>

/** \brief Определение типа для представления номера телефона - Phone */
typedef unsigned long long Phone;

/** \brief Person - структура для хранения персональных данных. */
struct Person
{
  /** \brief Конструктор по умолчанию. Создаёт пустую структуру. */
  Person() : m_phone(0), m_age(0)
  {
  }

  /***********************************************************************************************//**
  *     \brief Конструктор, создающий экземпляр структуры из CSV-строки, считанной из файла.
  *
  *     \param csv Строка данных из CSV-файла.
  ****************************************************************************************************/
  Person(const std::string &csv);

  /***********************************************************************************************//**
  *     \brief Копирующий конструктор
  *
  *     \param other Источник для копирования.
  ****************************************************************************************************/
  Person(const Person &other) = default;

  /***********************************************************************************************//**
  *     \brief Преобразует объект в CSV-строку.
  *
  *     \return Объект в виде std::string.
  ****************************************************************************************************/
  std::string toCsv() const;

  /***********************************************************************************************//**
  *     \brief Оператор сравнения "меньше"
  *
  *     \param other Экземпляр для сравнения с данным.
  *
  *     \return True если данный экземпляр меньше другого.
  ****************************************************************************************************/
  bool operator <(const Person &other) const;

  /***********************************************************************************************//**
  *     \brief Оператор сравнения "больше"
  *
  *     \param other Экземпляр для сравнения с данным.
  *
  *     \return True если данный экземпляр больше другого.
  ****************************************************************************************************/
  bool operator >(const Person &other) const;

  Phone m_phone;  ///< Номер телефона
  std::string m_fio;  ///< ФИО
  unsigned int m_age; ///< Возраст
  std::string m_address;  ///< Адрес по месту регистрации
};

/***********************************************************************************************//**
*     \brief Оператор вывода персональных данных в стандартный поток вывода
*
*     \param [in,out] s      Поток std::ostream для ввода в него.
*     \param [in,out] person Структура с персональными данными.
*
*     \return Ссылку на поток вывода.
****************************************************************************************************/
std::ostream &operator << (std::ostream &s, const Person &person);

/***********************************************************************************************//**
*     \brief Оператор ввода персональных данных из стандартного потока ввода
*
*     \param [in,out] s      Поток std::istream для ввода из него.
*     \param [in,out] person Структура для ввода персональных данных.
*
*     \return Ссылку на поток ввода.
****************************************************************************************************/
std::istream &operator >> (std::istream &s, Person &person);
